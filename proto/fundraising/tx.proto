syntax = "proto3";
package tendermint.fundraising.fundraising;

import "gogoproto/gogo.proto";
import "cosmos_proto/coin.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "fundraising/makfundraising.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/tendermint/fundraising/x/fundraising/types";

// Msg defines the Msg service.
service Msg {
  // this line is used by starport scaffolding # proto/tx/rpc
  // Submit a create english auction message.
  rpc CreateEnglishAuction(MsgCreateEnglishAuction) returns (MsgCreateEnglishAuctionResponse);

  // Submit a create fixed price auction message.
  rpc CreateFixedPriceAuction(MsgCreateFixedPriceAuction) returns (MsgCreateFixedPriceAuctionResponse);

  // Submit a cancel fundraising message.
  rpc CancelFundraising(MsgCancelFundraising) returns (MsgCancelFundraisingResponse);

  // Submit a PlaceBid message to the certain fundraising.
  rpc PlaceBid(MsgPlaceBid) returns (MsgPlaceBidResponse);
}

// this line is used by starport scaffolding # proto/tx/message

// MsgCreateEnglishAuction defines an sdk.Msg type that supports submitting a create english auction tx.
//
// See: https://github.com/tendermint/fundraising/tree/main/x/fundraising/spec/04_messages.md
message MsgCreateEnglishAuction {
  string start_price = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];

  string pool_creator_address = 1 [(gogoproto.moretags) = "yaml:\"pool_creator_address\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "account address of the origin of this message",
      example: "\"cosmos1e35y69rhrt7y4yce5l5u73sjnxu0l33wvznyun\"",
      format: "sdk.AccAddress"
    }];

  // id of the target pool type, must match the value in the pool. Only pool-type-id 1 is supported.
  uint32 pool_type_id = 2 [(gogoproto.moretags) = "yaml:\"pool_type_id\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1\"",
      format: "uint32"
    }];

  // reserve coin pair of the pool to deposit.
  repeated cosmos.base.v1beta1.Coin deposit_coins = 4 [(gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"deposit_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "[{\"denom\": \"denomX\", \"amount\": \"1000000\"}, {\"denom\": \"denomY\", \"amount\": \"2000000\"}]",
      format: "sdk.Coins"
    }];
}


    StartPrice       sdk.Dec           // starting price of the auction
    SellingCoin      sdk.Coin          // selling coin for the auction
    PayingCoinDenom string             // the paying coin denom that a bidder needs to bid for
    VestingAddress   string            // the vesting account that releases the paying amount of coins based on the schedules
    VestingSchedules []VestingSchedule // vesting schedules for the auction
    MaximumBidPrice  sdk.Dec           // the maximum bid price for the auction
    ExtendRate       sdk.Dec           // rate that decides if the auction needs another round
    StartTime        time.Time         // start time of the auction
    EndTime          time.Time         // end time of the auction
    }
    ```