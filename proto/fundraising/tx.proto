syntax = "proto3";
package tendermint.fundraising.fundraising;

import "gogoproto/gogo.proto";
import "cosmos_proto/coin.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "fundraising/fundraising.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/tendermint/fundraising/x/fundraising/types";

// Msg defines the Msg service.
service Msg {
  // this line is used by starport scaffolding # proto/tx/rpc
  // Submit a create english auction message.
  rpc CreateEnglishAuction(MsgCreateEnglishAuction) returns (MsgCreateEnglishAuctionResponse);

  // Submit a create fixed price auction message.
  rpc CreateFixedPriceAuction(MsgCreateFixedPriceAuction) returns (MsgCreateFixedPriceAuctionResponse);

  // Submit a cancel fundraising message.
  rpc CancelFundraising(MsgCancelFundraising) returns (MsgCancelFundraisingResponse);

  // Submit a PlaceBid message to the certain fundraising.
  rpc PlaceBid(MsgPlaceBid) returns (MsgPlaceBidResponse);
}

// this line is used by starport scaffolding # proto/tx/message

// MsgCreateEnglishAuction defines an sdk.Msg type that supports submitting a create english auction tx.
//
// See: https://github.com/tendermint/fundraising/tree/main/x/fundraising/spec/04_messages.md
message MsgCreateEnglishAuction {
  string start_price = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];

  // selling_coin specifies the selling coin for the auction
  cosmos.base.v1beta1.Coin selling_coin = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];

  // paying_coin_denom specifies the paying coin denom that bidders use to bid for
  string paying_coin_denom = 3;

  // vesting_address specifies the bech32-encoded vesting address that holds
  // vesting amounts of coin
  string vesting_address = 4;

  // vesting_schedules specifies the vesting schedules for the auction
  repeated VestingSchedule vesting_schedules = 5 [
    (gogoproto.nullable) = false
  ];

  // maximum_bid_price specifies the maximum bid price for the auction
  string maximum_bid_price = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // extend_rate specifies the rate that decides if the auction needs another
  // round
  string extend_rate = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 8 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];

  // end_time specifies the end time of the plan
  google.protobuf.Timestamp end_time = 9 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
}

// MsgCreateEnglishAuctionResponse defines the Msg/MsgCreateEnglishAuctionResponse response type.
message MsgCreateEnglishAuctionResponse {}

message MsgCreateFixedPriceAuction {
  string start_price = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];

  // selling_coin specifies the selling coin for the auction
  cosmos.base.v1beta1.Coin selling_coin = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];

  // paying_coin_denom specifies the paying coin denom that bidders use to bid for
  string paying_coin_denom = 3;

  // vesting_address specifies the bech32-encoded vesting address that holds
  // vesting amounts of coin
  string vesting_address = 4;

  // vesting_schedules specifies the vesting schedules for the auction
  repeated VestingSchedule vesting_schedules = 5 [
    (gogoproto.nullable) = false
  ];

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 6 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];

  // end_time specifies the end time of the plan
  google.protobuf.Timestamp end_time = 7 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
}

// MsgCreateFixedPriceAuctionResponse defines the Msg/MsgCreateFixedPriceAuctionResponse response type.
message MsgCreateFixedPriceAuctionResponse {}

message MsgCancelFundraising {
  // id specifies index of the auction
  uint64 id = 1;
}

// MsgCancelFundraisingResponse defines the Msg/MsgCancelFundraisingResponse response type.
message MsgCancelFundraisingResponse {}

message MsgPlaceBid {
  // id specifies index of the auction
  uint64 auction_id = 1;

  // price specifies the increasing bid price is only possible
  string price = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // coin specifies the paying amount of coin that the bidder bids
  cosmos.base.v1beta1.Coin coin = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
}

// MsgPlaceBidResponse defines the Msg/MsgPlaceBidResponse response type.
message MsgPlaceBidResponse {}


